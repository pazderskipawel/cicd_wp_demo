name: main pipeline
on:
  push:
  # branches: [ "database", "main" ]
    paths-ignore:
      - 'README.md'
  # pull_request:
  # branches: [ "main" ]
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  pre-checks:
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Check and Install Docker & Compose
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          else
            echo "Docker is already installed."
          fi
          if ! docker compose version &> /dev/null; then
            echo "Docker Compose is not installed. Installing Compose..."
            DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
            mkdir -p $DOCKER_CONFIG/cli-plugins
            curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
            chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
      - name: Clean up last build
        run: |
          docker compose -f webapp/docker-compose.yml down -v --rmi all --remove-orphans
          docker system prune -af --volumes
      - name: Create .env file
        run: |
          echo "WORDPRESS_SITE_TITLE=${{ vars.WORDPRESS_SITE_TITLE }}" >> .env
          echo "WORDPRESS_ADMIN_USER=${{ vars.WORDPRESS_ADMIN_USER }}" >> .env
          echo "WORDPRESS_ADMIN_PASSWORD=${{ secrets.WORDPRESS_ADMIN_PASSWORD }}" >> .env
          echo "WORDPRESS_ADMIN_EMAIL=${{ vars.WORDPRESS_ADMIN_EMAIL }}" >> .env      
          echo "WORDPRESS_DB_NAME=${{ vars.WORDPRESS_DB_NAME }}" >> .env
          echo "WORDPRESS_DB_USER=${{ vars.WORDPRESS_DB_USER }}" >> .env
          echo "WORDPRESS_DB_PASSWORD=${{ secrets.WORDPRESS_DB_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
      - name: Prepare bind mount directories
        run: |
          export DIRS="webapp/backups"
          mkdir -p $DIRS
          chown ${{ vars.OS_USERNAME }}:${{ vars.OS_USERGROUP }} $DIRS
  validate-app:
    needs: pre-checks
    runs-on: [self-hosted]
    steps:
      - name: Validate Docker Compose File
        run: docker compose --env-file .env -f webapp/docker-compose.yml up -d --dry-run
  run-app:
    needs: validate-app
    runs-on: [self-hosted]
    steps:
      - name: Start WordPress Containers
        run: docker compose --env-file .env -f webapp/docker-compose.yml up -d --build
      - name: Copy configuration files to container
        run: |
          docker exec wordpress /bin/bash -c "chmod +x /var/www/wordpress-config/*.sh"
      - name: Add user for wordpress CLI
        run: |
          docker exec wordpress /bin/bash -c "adduser --disabled-password --gecos '' deployuser"
      - name: Install WP-CLI
        run: |
          docker exec wordpress /bin/bash -c "/var/www/wordpress-config/installwpcli.sh"
      - name: Configure WordPress
        run: |
          docker exec wordpress /bin/bash -c "/var/www/wordpress-config/configurewp.sh"
      - name: allow http
        run: |
          docker exec wordpress /bin/bash -c "/var/www/wordpress-config/allowhttp.sh"
  notify-on-fail:
    needs: [pre-checks, validate-app, run-app]
    runs-on: [self-hosted]
    steps:
      - name: Notify Discord on failure
        #https://github.com/marketplace/actions/actions-status-discord
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "‚ùå Build Failed"
          description: "Job `${{ github.job }}` in workflow `${{ github.workflow }}` failed on `${{ github.ref_name }}`."
          color: 0xff0000
