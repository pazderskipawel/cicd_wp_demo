name: main pipeline
on:
  push:
  #  branches: [ "database", "main" ]
    paths-ignore:
      - 'README.md'
  # pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true
jobs:
  pre-checks:
    runs-on: [self-hosted]
    steps:
      - name: Check if Docker is installed
        run: |
          if ! command -v docker &> /dev/null
          then
            echo "Docker is not installed!"
            exit 1
          else
            echo "Docker is installed."
          fi
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Clean up last build
        run: |
          docker compose -f webapp/docker-compose.yml down -v --rmi all --remove-orphans
          docker system prune -af --volumes
      - name: Create .env file
        run: |
          echo "WORDPRESS_SITE_TITLE=${{ vars.WORDPRESS_SITE_TITLE }}" >> .env
          echo "WORDPRESS_ADMIN_USER=${{ vars.WORDPRESS_ADMIN_USER }}" >> .env
          echo "WORDPRESS_ADMIN_PASSWORD=${{ secrets.WORDPRESS_ADMIN_PASSWORD }}" >> .env
          echo "WORDPRESS_ADMIN_EMAIL=${{ vars.WORDPRESS_ADMIN_EMAIL }}" >> .env      
          echo "WORDPRESS_DB_NAME=${{ vars.WORDPRESS_DB_NAME }}" >> .env
          echo "WORDPRESS_DB_USER=${{ vars.WORDPRESS_DB_USER }}" >> .env
          echo "WORDPRESS_DB_PASSWORD=${{ secrets.WORDPRESS_DB_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
      - name: Prepare bind mount directories
        run: |
          export DIRS="webapp/backups"
          mkdir -p $DIRS
          chown ${{ vars.OS_USERNAME }}:${{ vars.OS_USERGROUP }} $DIRS
  validate-app:
    needs: pre-checks
    runs-on: [self-hosted]
    steps:
      - name: Validate Docker Compose File
        run: docker compose --env-file .env -f webapp/docker-compose.yml up -d --dry-run
  run-app:
    needs: validate-app
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    runs-on: [self-hosted, test]
    steps:
      - name: Start WordPress Containers
        run: docker compose --env-file .env -f webapp/docker-compose.yml up -d --build
      - name: Copy configuration files to container
        run: |
          docker exec wordpress /bin/bash -c "chmod +x /var/www/wordpress-config/*.sh"  
          docker exec wordpress /bin/bash -c "cp -r /var/www/wordpress-config/* /var/www/html/"
          docker exec wordpress /bin/bash -c "chown -R www-data:www-data /var/www/html/*"
      - name: Add user for wordpress CLI
        run: |
          docker exec wordpress /bin/bash -c "adduser --disabled-password --gecos '' deployuser"
      - name: switch to user and move to wordpress root directory
        run: |
          docker exec wordpress /bin/bash -c "su deployuser -c 'cd /var/www/html/'"
      - name: Install WP-CLI
        run: |
          docker exec wordpress /bin/bash -c "./installwpcli.sh"
      - name: Configure WordPress
        run: |
          docker exec wordpress /bin/bash -c "./configurewp.sh"
      - name: allow http
        run: |
          docker exec wordpress /bin/bash -c "./allowhttp.sh"