name: Prepare Environment

on:
  workflow_call: 
    secrets:
      WORDPRESS_ADMIN_PASSWORD: 
        required: true
      WORDPRESS_DB_PASSWORD: 
        required: true
      MYSQL_ROOT_PASSWORD: 
        required: true
      RUNNER_SUDO_PASSWD: 
        required: true
  
jobs:
  check-out-environment:
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Check and Install Docker & Docker Compose
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          else
            echo "Docker is already installed."
          fi
          if ! docker compose version &> /dev/null; then
            echo "Docker Compose is not installed. Installing Compose..."
            DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
            mkdir -p $DOCKER_CONFIG/cli-plugins
            curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
            chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_WORDPRESS_SITE_TITLE: ${{ vars.WORDPRESS_SITE_TITLE }}
          envkey_WORDPRESS_ADMIN_USER: ${{ vars.WORDPRESS_ADMIN_USER }}
          envkey_WORDPRESS_ADMIN_PASSWORD: ${{ secrets.WORDPRESS_ADMIN_PASSWORD }}
          envkey_WORDPRESS_ADMIN_EMAIL: ${{ vars.WORDPRESS_ADMIN_EMAIL }}    
          envkey_WORDPRESS_DB_NAME: ${{ vars.WORDPRESS_DB_NAME }}
          envkey_WORDPRESS_DB_USER: ${{ vars.WORDPRESS_DB_USER }}
          envkey_WORDPRESS_DB_PASSWORD: ${{ secrets.WORDPRESS_DB_PASSWORD }}
          envkey_MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          file_name: .env
          fail_on_empty: false
          sort_keys: false
      - name: Prepare bind mount directories
        run: |
          export DIRS="webapp/backups"
          mkdir -p $DIRS
          chown ${{ vars.OS_USERNAME }}:${{ vars.OS_USERGROUP }} $DIRS
      - name: Create https certificates if not exist
        run: | 
          if [ ! -f ./localhost.pem ] || [ ! -f ./localhost-key.pem ]; then
            echo "Creating certificates..."
            if ! command -v mkcert &> /dev/null; then
              echo "${{ secrets.RUNNER_SUDO_PASSWD }}" | sudo -S apt update -y
              echo "${{ secrets.RUNNER_SUDO_PASSWD }}" | sudo -S apt install -y libnss3-tools mkcert
              mkcert -install
            fi
            mkcert localhost
            mv *.pem ./webapp/nginx-config/
          else
            echo "Certificates already exist."
          fi